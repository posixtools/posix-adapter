#!/bin/sh
#==============================================================================
#                _
#   ___  ___  __| |
#  / __|/ _ \/ _` |
#  \__ \  __/ (_| |
#  |___/\___|\__,_|
#==============================================================================
# TOOL: SED
#==============================================================================

TOOL_NAME='posix_adapter__sed'

_print_help() {
  >&2 echo '=============================================================================='
  >&2 echo ''
  >&2 echo '  posix_adapter__sed --help'
  >&2 echo '  posix_adapter__sed [--extended] [--in-place <suffix>]'
  >&2 echo '      [--expression <expression>] [<path>]'
  >&2 echo ''
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Execution mapping function for the "sed" command line tool with a'
  >&2 echo ' uniform interface.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Globals:'
  >&2 echo '   None'
  >&2 echo ' Options:'
  >&2 echo '   --help - Prints out the help message and exits.'
  >&2 echo '   --extended - Use the extended regexp engine.'
  >&2 echo '   --in-place <suffix> - In place processing with optional backup with suffix.'
  >&2 echo '   --expression <expression> - Expression that should be executed.'
  >&2 echo ' Arguments:'
  >&2 echo '   [1] [path] - Optional file path.'
  >&2 echo ' STDIN:'
  >&2 echo '   Input passed to the mapped command.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Output variables:'
  >&2 echo '   None'
  >&2 echo ' STDOUT:'
  >&2 echo '   Output of the mapped command.'
  >&2 echo ' STDERR:'
  >&2 echo '   Error output of the mapped command.'
  >&2 echo ' Status:'
  >&2 echo '   0  - Call was successful.'
  >&2 echo '   .. - Call failed with its error status.'
  >&2 echo '   98 - Invalid parameter configuration.'
  >&2 echo '   99 - No compatible call style was found.'
  >&2 echo '=============================================================================='
}

_posix_adapter__sed() {
  posix_adapter__flag__extended='0'

  posix_adapter__flag__in_place='0'
  posix_adapter__value__in_place_suffix=''

  posix_adapter__flag__expression='0'
  posix_adapter__value__expression=''

  posix_adapter__flag__path='0'
  posix_adapter__value__path=''

  while [ "$#" -gt '0' ]
  do
    case "$1" in
      --extended)
        posix_adapter__flag__extended='1'
        shift
        ;;
      --in-place)
        posix_adapter__flag__in_place='1'
        posix_adapter__value__in_place_suffix="$2"
        shift
        shift
        ;;
      --expression)
        posix_adapter__flag__expression='1'
        posix_adapter__value__expression="$2"
        shift
        shift
        ;;
      --[!-]*)
        _report_invalid_parameter \
          "Unexpected option '${1}'!" \
          'You can only use the available options.'
        ;;
      -[!-]*)
        _report_invalid_parameter \
          "Invalid single dashed option '${1}'!" \
          "posix_adapter only uses double dashed options like '--option'."
        ;;
      *)
        if [ "$posix_adapter__flag__path" -eq '0' ]
        then
          posix_adapter__flag__path='1'
          posix_adapter__value__path="$1"
          shift
        else
          posix_adapter__error_details="$( \
            printf '%s' 'You have already passed a path argument, you '; \
            printf '%s' 'probably forgot the --expression flag before '; \
            printf '%s\n' 'your expression which is mandatory in posix_adapter.' \
          )"
          _report_invalid_parameter \
            'Unexpected parameter!' \
            "$posix_adapter__error_details"
        fi
        ;;
    esac
  done

  # Assembling the decision string.
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
  # 0000
  posix_adapter__decision="${posix_adapter__flag__extended}"
  posix_adapter__decision="${posix_adapter__decision}${posix_adapter__flag__in_place}"
  posix_adapter__decision="${posix_adapter__decision}${posix_adapter__flag__expression}"
  posix_adapter__decision="${posix_adapter__decision}${posix_adapter__flag__path}"

  _posix_adapter__sed__common \
    "$posix_adapter__decision" \
    "$posix_adapter__value__in_place_suffix" \
    "$posix_adapter__value__expression" \
    "$posix_adapter__value__path"
}

#==============================================================================
# Common call mapping function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] decision_string - String that decodes the optional parameter presence.
#   [2] value_in_place_suffix - Value passed with the expression flag.
#   [3] value_expression - Value passed with the expression flag.
#   [4] value_path - Value for the positional path argument.
# STDIN:
#   Input passed to the mapped command.
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   Mapped command's output.
# STDERR:
#   Mapped command's error output. Mapping error output.
# Status:
#   0  - Call succeeded.
#   .. - Call failed with it's error status
#==============================================================================
_posix_adapter__sed__common() {
  posix_adapter__decision_string="$1"
  posix_adapter__value__in_place_suffix="$2"
  posix_adapter__value__expression="$3"
  posix_adapter__value__path="$4"

  case "$posix_adapter__decision_string" in
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    0010)
      sed \
        \
        \
        -e "$posix_adapter__value__expression" \
        \

      ;;
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    0011)
      sed \
        \
        \
        -e "$posix_adapter__value__expression" \
        "$posix_adapter__value__path" \

      ;;
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    0110)
      sed \
        \
        -i"$posix_adapter__value__in_place_suffix" \
        -e "$posix_adapter__value__expression" \
        \

      ;;
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    0111)
      sed \
        \
        -i"$posix_adapter__value__in_place_suffix" \
        -e "$posix_adapter__value__expression" \
        "$posix_adapter__value__path" \

      ;;
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    1010)
      sed \
        -E \
        \
        -e "$posix_adapter__value__expression" \
        \

      ;;
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    1011)
      sed \
        -E \
        \
        -e "$posix_adapter__value__expression" \
        "$posix_adapter__value__path" \

      ;;
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    1110)
      sed \
        -E \
        -i"$posix_adapter__value__in_place_suffix" \
        -e "$posix_adapter__value__expression" \
        \

      ;;
  # ,----- extended
  # |,---- in_place
  # ||,--- expression
  # |||,-- path
    1111)
      sed \
        -E \
        -i"$posix_adapter__value__in_place_suffix" \
        -e "$posix_adapter__value__expression" \
        "$posix_adapter__value__path" \

      ;;
    *)
      _report_incompatible_call \
        'Unexpected parameter combination!' \
        'You can only use the available options.'
      ;;
  esac
}

#==============================================================================
# Invalid parameter error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   TOOL_NAME
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   98  - The function will terminate the execution.
#==============================================================================
_report_invalid_parameter() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | ${TOOL_NAME} | reason  | ${reason}"
  >&2 echo "ERROR | ${TOOL_NAME} | details | ${details}"
  _print_help
  exit 98
}

#==============================================================================
# Incompatible call error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   TOOL_NAME
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   99  - The function will terminate the execution.
#==============================================================================
_report_incompatible_call() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | ${TOOL_NAME} | reason  | ${reason}"
  >&2 echo "ERROR | ${TOOL_NAME} | details | ${details}"
  _print_help
  exit 99
}

#==============================================================================
# ENTRY POINT
#==============================================================================

_posix_adapter__sed "$@"
