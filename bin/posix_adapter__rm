#!/bin/sh
#==============================================================================
#
#   _ __ _ __ ___
#  | '__| '_ ` _ \
#  | |  | | | | | |
#  |_|  |_| |_| |_|
#==============================================================================
# TOOL: RM
#==============================================================================

TOOL_NAME='posix_adapter__rm'

_print_help() {
  >&2 echo '=============================================================================='
  >&2 echo ''
  >&2 echo '  posix_adapter__rm --help'
  >&2 echo '  posix_adapter__rm [--recursive] [--force] <path>'
  >&2 echo ''
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Execution mapping function for the "rm" command line tool with a uniform'
  >&2 echo ' interface.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Globals:'
  >&2 echo '   None'
  >&2 echo ' Options:'
  >&2 echo '   --help - Prints out the help message and exits.'
  >&2 echo '   --recursive - rm compatible flag for the -r flag.'
  >&2 echo '   --force - rm compatible flag for the -f flag.'
  >&2 echo '   --verbose - rm compatible flag for the -v flag.'
  >&2 echo ' Arguments:'
  >&2 echo '   [1] path - Path that should be removed.'
  >&2 echo ' STDIN:'
  >&2 echo '   Input passed to the mapped command.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Output variables:'
  >&2 echo '   None'
  >&2 echo ' STDOUT:'
  >&2 echo '   Output of the mapped command.'
  >&2 echo ' STDERR:'
  >&2 echo '   Error output of the mapped command.'
  >&2 echo ' Status:'
  >&2 echo '   0  - Call was successful.'
  >&2 echo '   .. - Call failed with its error status.'
  >&2 echo '   98 - Invalid parameter configuration.'
  >&2 echo '   99 - No compatible call style was found.'
  >&2 echo '=============================================================================='
}

_posix_adapter__rm() {
  posix_adapter__flag__recursive='0'
  posix_adapter__flag__force='0'
  posix_adapter__flag__verbose='0'

  posix_adapter__flag__path='0'
  posix_adapter__value__path=''

  while [ "$#" -gt '0' ]
  do
    case "$1" in
      --recursive)
        posix_adapter__flag__recursive='1'
        shift
        ;;
      --force)
        posix_adapter__flag__force='1'
        shift
        ;;
      --verbose)
        posix_adapter__flag__verbose='1'
        shift
        ;;
      --[!-]*)
        _report_invalid_parameter \
          "Unexpected option '${1}'!" \
          'You can only use the available options.'
        ;;
      -[!-]*)
        _report_invalid_parameter \
          "Invalid single dashed option '${1}'!" \
          "posix_adapter only uses double dashed options like '--option'."
        ;;
      *)
        if [ "$posix_adapter__flag__path" -eq '0' ]
        then
          posix_adapter__flag__path='1'
          posix_adapter__value__path="$1"
          shift
        else
          _report_invalid_parameter \
            'Unexpected parameter!' \
            "Parameter '${1}' is unexpected!"
        fi
        ;;
    esac
  done

  if [ "$posix_adapter__flag__path" -eq '0' ]
  then
    _report_invalid_parameter \
      'Missing <path> argument!' \
      'To be able to use rm, you need to specify a path to work with.'
  fi

  # Assembling the decision string.
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
  posix_adapter__decision="${posix_adapter__flag__recursive}"
  posix_adapter__decision="${posix_adapter__decision}${posix_adapter__flag__force}"
  posix_adapter__decision="${posix_adapter__decision}${posix_adapter__flag__verbose}"

  _posix_adapter__rm__common \
    "$posix_adapter__decision" \
    "$posix_adapter__value__path"
}

#==============================================================================
# Common call mapping function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] decision_string - String that decodes the optional parameter presence.
#   [2] value_path - Path value.
# STDIN:
#   Input passed to the mapped command.
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   Mapped command's output.
# STDERR:
#   Mapped command's error output. Mapping error output.
# Status:
#   0  - Call succeeded.
#   .. - Call failed with it's error status
#==============================================================================
_posix_adapter__rm__common() {
  posix_adapter__decision_string="$1"
  posix_adapter__value__path="$2"

  case "$posix_adapter__decision_string" in
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    000)
      rm \
        \
        \
        \
        "$posix_adapter__value__path" \

      ;;
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    001)
      rm \
        \
        \
        -v \
        "$posix_adapter__value__path" \

      ;;
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    010)
      rm \
        \
        -f \
        \
        "$posix_adapter__value__path" \

      ;;
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    011)
      rm \
        \
        -f \
        -v \
        "$posix_adapter__value__path" \

      ;;
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    100)
      rm \
        -r \
        \
        \
        "$posix_adapter__value__path" \

      ;;
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    101)
      rm \
        -r \
        \
        -v \
        "$posix_adapter__value__path" \

      ;;
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    110)
      rm \
        -r \
        -f \
        \
        "$posix_adapter__value__path" \

      ;;
  # ,---- recursive
  # |,--- force
  # ||,-- verbose
  # 000
    111)
      rm \
        -r \
        -f \
        -v \
        "$posix_adapter__value__path" \

      ;;
    *)
      _report_incompatible_call \
        'Unexpected parameter combination!' \
        'You can only use the available options.'
      ;;
  esac
}

#==============================================================================
# Invalid parameter error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   TOOL_NAME
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   98  - The function will terminate the execution.
#==============================================================================
_report_invalid_parameter() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | ${TOOL_NAME} | reason  | ${reason}"
  >&2 echo "ERROR | ${TOOL_NAME} | details | ${details}"
  _print_help
  exit 98
}

#==============================================================================
# Incompatible call error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   TOOL_NAME
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   99  - The function will terminate the execution.
#==============================================================================
_report_incompatible_call() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | ${TOOL_NAME} | reason  | ${reason}"
  >&2 echo "ERROR | ${TOOL_NAME} | details | ${details}"
  _print_help
  exit 99
}

#==============================================================================
# ENTRY POINT
#==============================================================================

_posix_adapter__rm "$@"
