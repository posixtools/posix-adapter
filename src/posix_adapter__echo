#!/bin/sh
#==============================================================================
#            _
#   ___  ___| |__   ___
#  / _ \/ __| '_ \ / _ \
# |  __/ (__| | | | (_) |
#  \___|\___|_| |_|\___/
#==============================================================================
# TOOL: ECHO
#==============================================================================

_posix_adapter__echo__print_help() {
  >&2 echo '=============================================================================='
  >&2 echo ''
  >&2 echo '  posix_adapter__echo --help'
  >&2 echo '  posix_adapter__echo [--no-newline] <string>'
  >&2 echo ''
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Execution mapping function for the "echo" command line tool with a uniform'
  >&2 echo ' interface.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Globals:'
  >&2 echo '   None'
  >&2 echo ' Options:'
  >&2 echo '   --help - Prints out the help message and exits.'
  >&2 echo '   --no-newline - Flag that should prevent printing the trailing new line.'
  >&2 echo ' Arguments:'
  >&2 echo '   [1] string - String that should be printed.'
  >&2 echo ' STDIN:'
  >&2 echo '   Input passed to the mapped command.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Output variables:'
  >&2 echo '   None'
  >&2 echo ' STDOUT:'
  >&2 echo '   Output of the mapped command.'
  >&2 echo ' STDERR:'
  >&2 echo '   Error output of the mapped command.'
  >&2 echo ' Status:'
  >&2 echo '   0  - Call was successful.'
  >&2 echo '   .. - Call failed with its error status.'
  >&2 echo '   98 - Invalid parameter configuration.'
  >&2 echo '   99 - No compatible call style was found.'
  >&2 echo '=============================================================================='
}

posix_adapter__echo() {
  posix_adapter__flag__no_newline='0'

  posix_adapter__value__string=''

  if [ "$#" -eq 0 ]
  then
    _posix_adapter__echo__report_invalid_parameter \
      'Missing string parameter!' \
      'A singular <string> parameter was expected!'
  fi

  while [ "$#" -gt '0' ]
  do
    case "$1" in
      --no-newline)
        posix_adapter__flag__no_newline='1'
        shift
        ;;
      --[!-]*)
        _posix_adapter__echo__report_invalid_parameter \
          "Unexpected option '${1}'!" \
          'You can only use the available options.'
        ;;
      -[!-]*)
        _posix_adapter__echo__report_invalid_parameter \
          "Invalid single dashed option '${1}'!" \
          "posix_adapter only uses double dashed options like '--option'."
        ;;
      *)
        posix_adapter__value__string="$1"
        shift
        if [ "$#" -gt '0' ]
        then
          _posix_adapter__echo__report_invalid_parameter \
            'Unexpected parameter!' \
            'Multiple separated strings passed only one is expected!'
        fi
        break
        ;;
    esac
  done

  # Assembling the decision string.
  # ,-- no_newline
  # 0
  posix_adapter__decision="${posix_adapter__flag__no_newline}"

  _posix_adapter__echo__common \
    "$posix_adapter__decision" \
    "$posix_adapter__value__string"
}

#==============================================================================
# Common call mapping function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] decision_string - String that decodes the optional parameter presence.
#   [2] value_string -  String passed to the echo command.
# STDIN:
#   Input passed to the mapped command.
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   Mapped command's output.
# STDERR:
#   Mapped command's error output. Mapping error output.
# Status:
#   0  - Call succeeded.
#   .. - Call failed with it's error status
#==============================================================================
_posix_adapter__echo__common() {
  posix_adapter__decision_string="$1"
  posix_adapter__value__string="$2"

  case "$posix_adapter__decision_string" in
  # ,-- no_newline
    0)
      echo "$posix_adapter__value__string"
      ;;
  # ,-- no_newline
    1)
      printf '%s' "$posix_adapter__value__string"
      ;;
    *)
      _posix_adapter__echo__report_incompatible_call \
        'Unexpected parameter combination!' \
        'You can only use the available options.'
      ;;
  esac
}

#==============================================================================
# Invalid parameter error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   98  - The function will terminate the execution.
#==============================================================================
_posix_adapter__echo__report_invalid_parameter() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | posix_adapter__echo | reason  | ${reason}"
  >&2 echo "ERROR | posix_adapter__echo | details | ${details}"
  _posix_adapter__echo__print_help
  exit 98
}

#==============================================================================
# Incompatible call error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   99  - The function will terminate the execution.
#==============================================================================
_posix_adapter__echo__report_incompatible_call() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | posix_adapter__echo | reason  | ${reason}"
  >&2 echo "ERROR | posix_adapter__echo | details | ${details}"
  _posix_adapter__echo__print_help
  exit 99
}

#==============================================================================
# ENTRY POINT
#==============================================================================

# If the script is called directly, call the internal function.
case $0 in
  *posix_adapter__echo)
    posix_adapter__echo "$@"
    ;;
esac
