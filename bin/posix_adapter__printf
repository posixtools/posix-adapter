#!/bin/sh
#==============================================================================
#              _       _    __
#   _ __  _ __(_)_ __ | |_ / _|
#  | '_ \| '__| | '_ \| __| |_
#  | |_) | |  | | | | | |_|  _|
#  | .__/|_|  |_|_| |_|\__|_|
#==|_|=========================================================================
# TOOL: PRINTF
#==============================================================================

TOOL_NAME='posix_adapter__printf'

_print_help() {
  >&2 echo '=============================================================================='
  >&2 echo ''
  >&2 echo '  posix_adapter__printf --help'
  >&2 echo '  posix_adapter__printf <printf_specification>..'
  >&2 echo ''
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Execution mapping function for the "printf" command line tool with a uniform'
  >&2 echo ' interface. This is the only command mapping besides tput that is only a proxy'
  >&2 echo ' because of the nature of printf.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Globals:'
  >&2 echo '   None'
  >&2 echo ' Options:'
  >&2 echo '   --help - Prints out the help message and exits.'
  >&2 echo ' Arguments:'
  >&2 echo '   [..] specification - printf compatible specification.'
  >&2 echo ' STDIN:'
  >&2 echo '   Input passed to the mapped command.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Output variables:'
  >&2 echo '   None'
  >&2 echo ' STDOUT:'
  >&2 echo '   Output of the mapped command.'
  >&2 echo ' STDERR:'
  >&2 echo '   Error output of the mapped command.'
  >&2 echo ' Status:'
  >&2 echo '   0  - Call was successful.'
  >&2 echo '   .. - Call failed with its error status.'
  >&2 echo '   98 - Invalid parameter configuration.'
  >&2 echo '   99 - No compatible call style was found.'
  >&2 echo '=============================================================================='
}

_posix_adapter__printf() {
  if [ "$1" = '--help' ]
  then
    _print_help
    exit 0
  fi

  # We are proxying all the parameters here, hence ignoring the warning.
  # shellcheck disable=SC2059
  printf "$@"
}

#==============================================================================
# Invalid parameter error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   TOOL_NAME
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   98  - The function will terminate the execution.
#==============================================================================
_report_invalid_parameter() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | ${TOOL_NAME} | reason  | ${reason}"
  >&2 echo "ERROR | ${TOOL_NAME} | details | ${details}"
  _print_help
  exit 98
}

#==============================================================================
# Invalid parameter combination error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   TOOL_NAME
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   99  - The function will terminate the execution.
#==============================================================================
_report_invalid_parameter_combination() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | ${TOOL_NAME} | reason  | ${reason}"
  >&2 echo "ERROR | ${TOOL_NAME} | details | ${details}"
  _print_help
  exit 99
}

#==============================================================================
# ENTRY POINT
#==============================================================================

_posix_adapter__printf "$@"
