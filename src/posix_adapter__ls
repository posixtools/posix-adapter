#!/bin/sh
#==============================================================================
#   _
#  | |___
#  | / __|
#  | \__ \
#  |_|___/
#==============================================================================
# TOOL: LS
#==============================================================================

_posix_adapter__ls__print_help() {
  >&2 echo '=============================================================================='
  >&2 echo ''
  >&2 echo '  posix_adapter__ls --help'
  >&2 echo '  posix_adapter__ls [--all] [--almost-all] <path>'
  >&2 echo ''
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Execution mapping function for the "ls" command line tool with a'
  >&2 echo ' uniform interface.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Globals:'
  >&2 echo '   None'
  >&2 echo ' Options:'
  >&2 echo '   --help - Prints out the help message and exits.'
  >&2 echo '   --all - ls compatible -a flag equivavelent.'
  >&2 echo '   --almost-all - ls compatible -A flag equivavelent.'
  >&2 echo ' Arguments:'
  >&2 echo '   [1] path - Path that should be listed.'
  >&2 echo ' STDIN:'
  >&2 echo '   Input passed to the mapped command.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Output variables:'
  >&2 echo '   None'
  >&2 echo ' STDOUT:'
  >&2 echo '   Output of the mapped command.'
  >&2 echo ' STDERR:'
  >&2 echo '   Error output of the mapped command.'
  >&2 echo ' Status:'
  >&2 echo '   0  - Call was successful.'
  >&2 echo '   .. - Call failed with its error status.'
  >&2 echo '   98 - Invalid parameter configuration.'
  >&2 echo '   99 - No compatible call style was found.'
  >&2 echo '=============================================================================='
}

posix_adapter__ls() {
  posix_adapter__flag__all='0'
  posix_adapter__flag__almost_all='0'

  posix_adapter__flag__path='0'
  posix_adapter__value__path=''

  while [ "$#" -gt '0' ]
  do
    case "$1" in
      --all)
        posix_adapter__flag__all='1'
        shift
        ;;
      --almost-all)
        posix_adapter__flag__almost_all='1'
        shift
        ;;
      --[!-]*)
        _posix_adapter__ls__report_invalid_parameter \
          "Unexpected option '${1}'!" \
          'You can only use the available options.'
        ;;
      -[!-]*)
        _posix_adapter__ls__report_invalid_parameter \
          "Invalid single dashed option '${1}'!" \
          "posix_adapter only uses double dashed options like '--option'."
        ;;
      *)
        if [ "$posix_adapter__flag__path" -eq '0' ]
        then
          posix_adapter__flag__path='1'
          posix_adapter__value__path="$1"
          shift
        else
          _posix_adapter__ls__report_invalid_parameter \
            'Unexpected parameter!' \
            "Parameter '${1}' is unexpected!"
        fi
        ;;
    esac
  done

  if [ "$posix_adapter__flag__path" -eq '0' ]
  then
    _posix_adapter__ls__report_invalid_parameter \
      'Missing <path> argument!' \
      'To be able to use ls, you need to specify a path to work with.'
  fi

  # Assembling the decision string.
  # ,-- all
  # |,- almost_all
  # 00
  posix_adapter__decision="${posix_adapter__flag__all}"
  posix_adapter__decision="${posix_adapter__decision}${posix_adapter__flag__almost_all}"

  _posix_adapter__ls__common \
    "$posix_adapter__decision" \
    "$posix_adapter__value__path"
}

#==============================================================================
# Common call mapping function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] decision_string - String that decodes the optional parameter presence.
#   [2] value_path - Path value.
# STDIN:
#   Input passed to the mapped command.
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   Mapped command's output.
# STDERR:
#   Mapped command's error output. Mapping error output.
# Status:
#   0  - Call succeeded.
#   .. - Call failed with it's error status
#==============================================================================
_posix_adapter__ls__common() {
  posix_adapter__decision_string="$1"
  posix_adapter__value__path="$2"

  case "$posix_adapter__decision_string" in
  # ,-- all
  # |,- almost_all
    00)
      ls \
        \
        \
        "$posix_adapter__value__path" \

      ;;
  # ,-- all
  # |,- almost_all
    01)
      ls \
        \
        -A \
        "$posix_adapter__value__path" \

      ;;
  # ,-- all
  # |,- almost_all
    10)
      ls \
        -a \
        \
        "$posix_adapter__value__path" \

      ;;
    *)
      _posix_adapter__ls__report_incompatible_call \
        'Unexpected parameter combination!' \
        'You can only use the available options.'
      ;;
  esac
}

#==============================================================================
# Invalid parameter error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   98  - The function will terminate the execution.
#==============================================================================
_posix_adapter__ls__report_invalid_parameter() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | posix_adapter__ls | reason  | ${reason}"
  >&2 echo "ERROR | posix_adapter__ls | details | ${details}"
  _posix_adapter__ls__print_help
  exit 98
}

#==============================================================================
# Incompatible call error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   99  - The function will terminate the execution.
#==============================================================================
_posix_adapter__ls__report_incompatible_call() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | posix_adapter__ls | reason  | ${reason}"
  >&2 echo "ERROR | posix_adapter__ls | details | ${details}"
  _posix_adapter__ls__print_help
  exit 99
}

#==============================================================================
# ENTRY POINT
#==============================================================================

# If the script is called directly, call the internal function.
case $0 in
  *posix_adapter__ls)
    posix_adapter__ls "$@"
    ;;
esac
