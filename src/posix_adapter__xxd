#!/bin/sh
#==============================================================================
#                _
# __  ____  ____| |
# \ \/ /\ \/ / _` |
#  >  <  >  < (_| |
# /_/\_\/_/\_\__,_|
#==============================================================================
# TOOL: XXD
#==============================================================================

_posix_adapter__xxd__print_help() {
  >&2 echo '=============================================================================='
  >&2 echo ''
  >&2 echo '  posix_adapter__xxd --help'
  >&2 echo '  posix_adapter__xxd [--plain] [--revert]'
  >&2 echo ''
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Execution mapping function for the "xxd" command line tool with a uniform'
  >&2 echo ' interface.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Globals:'
  >&2 echo '   None'
  >&2 echo ' Options:'
  >&2 echo '   --help - Prints out the help message and exits.'
  >&2 echo '   --plain - xxd compatible plain hexdump flag -p.'
  >&2 echo '   --revert - xxd compatible revert flag -r.'
  >&2 echo ' Arguments:'
  >&2 echo '   None'
  >&2 echo ' STDIN:'
  >&2 echo '   Value is read from the standard input.'
  >&2 echo '------------------------------------------------------------------------------'
  >&2 echo ' Output variables:'
  >&2 echo '   None'
  >&2 echo ' STDOUT:'
  >&2 echo '   Output of the mapped command.'
  >&2 echo ' STDERR:'
  >&2 echo '   Error output of the mapped command.'
  >&2 echo ' Status:'
  >&2 echo '   0  - Call was successful.'
  >&2 echo '   .. - Call failed with its error status.'
  >&2 echo '   98 - Invalid parameter configuration.'
  >&2 echo '   99 - No compatible call style was found.'
  >&2 echo '=============================================================================='
}

posix_adapter__xxd() {
  posix_adapter__flag__plain='0'
  posix_adapter__flag__revert='0'

  while [ "$#" -gt '0' ]
  do
    case "$1" in
      --plain)
        posix_adapter__flag__plain='1'
        shift
        ;;
      --revert)
        posix_adapter__flag__revert='1'
        shift
        ;;
      --[!-]*)
        _posix_adapter__xxd__report_invalid_parameter \
          "Unexpected option '${1}'!" \
          'You can only use the available options.'
        ;;
      -[!-]*)
        _posix_adapter__xxd__report_invalid_parameter \
          "Invalid single dashed option '${1}'!" \
          "posix_adapter only uses double dashed options like '--option'."
        ;;
      *)
        _posix_adapter__xxd__report_invalid_parameter \
          'Unexpected parameter!' \
          "Parameter '${1}' is unexpected!"
        ;;
    esac
  done

  # Assembling the decision string.
  # ,------ plain
  # |,----- revert
  # 00
  posix_adapter__decision="${posix_adapter__flag__plain}"
  posix_adapter__decision="${posix_adapter__decision}${posix_adapter__flag__revert}"

  _posix_adapter__xxd__common \
    "$posix_adapter__decision"
}

#==============================================================================
# Common call mapping function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] decision_string - String that decodes the optional parameter presence.
# STDIN:
#   Input passed to the mapped command.
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   Mapped command's output.
# STDERR:
#   Mapped command's error output. Mapping error output.
# Status:
#   0  - Call succeeded.
#   .. - Call failed with it's error status
#==============================================================================
_posix_adapter__xxd__common() {
  posix_adapter__decision_string="$1"

  case "$posix_adapter__decision_string" in
  # ,------ plain
  # |,----- revert
    10)
      if command -v xxd >/dev/null
      then
        xxd -p
      else
        # Since xxd is not a common tool and for linux it is mostly shipped
        # with vim, we are replacing its functionality with python as a last
        # resort.
        if command -v python >/dev/null
        then
          python -c 'import sys;print("".join([line.encode().hex() for line in sys.stdin]))'

        elif command -v python3 >/dev/null
        then
          python3 -c 'import sys;print("".join([line.encode().hex() for line in sys.stdin]))'

        else
          _posix_adapter__xxd__report_incompatible_call \
            'No python nor python3 executable was found.' \
            'Posix adapter is out of options to provide the desired functionality..'
        fi
      fi
      ;;
  # ,------ plain
  # |,----- revert
    11)
      if command -v xxd >/dev/null
      then
        xxd -p -r
      else
        # See the explanation one case up for the usage of python.
        if command -v python >/dev/null
        then
          python -c 'import sys;print("".join([bytearray.fromhex(line).decode() for line in sys.stdin]).rstrip())'

        elif command -v python3 >/dev/null
        then
          python3 -c 'import sys;print("".join([bytearray.fromhex(line).decode() for line in sys.stdin]).rstrip())'

        else
          _posix_adapter__xxd__report_incompatible_call \
            'No python nor python3 executable was found.' \
            'Posix adapter is out of options to provide the desired functionality..'
        fi
      fi
      ;;
    *)
      _posix_adapter__xxd__report_incompatible_call \
        'Unexpected parameter combination!' \
        'You can only use the available options.'
      ;;
  esac
}

#==============================================================================
# Invalid parameter error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   98  - The function will terminate the execution.
#==============================================================================
_posix_adapter__xxd__report_invalid_parameter() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | posix_adapter__xxd | reason  | ${reason}"
  >&2 echo "ERROR | posix_adapter__xxd | details | ${details}"
  _posix_adapter__xxd__print_help
  exit 98
}

#==============================================================================
# Incompatible call error reporting helper function.
#------------------------------------------------------------------------------
# Globals:
#   None
# Options:
#   None
# Arguments:
#   [1] reason - Reason of the error.
#   [2] details - More details about the error.
# STDIN:
#   None
#------------------------------------------------------------------------------
# Output variables:
#   None
# STDOUT:
#   None
# STDERR:
#   Reported error.
# Status:
#   99  - The function will terminate the execution.
#==============================================================================
_posix_adapter__xxd__report_incompatible_call() {
  reason="$1"
  details="$2"
  >&2 echo "ERROR | posix_adapter__xxd | reason  | ${reason}"
  >&2 echo "ERROR | posix_adapter__xxd | details | ${details}"
  _posix_adapter__xxd__print_help
  exit 99
}

#==============================================================================
# ENTRY POINT
#==============================================================================

# If the script is called directly, call the internal function.
case $0 in
  *posix_adapter__xxd)
    posix_adapter__xxd "$@"
    ;;
esac
